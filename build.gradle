buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.1'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    //id 'checkstyle' // TODO: This is a reminder for me to setup checkstyle.
}

// Reproducible builds! https://docs.gradle.org/4.9/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

apply plugin: 'java'

// TODO: This is a reminder for me to setup checkstyle.
/* apply plugin: 'checkstyle'

configurations {
    checkstyleConfig
}

def versions = [
    checkstyle: '6.2',
]

dependencies {
    checkstyleConfig ("com.puppycrawl.tools:checkstyle:${versions.checkstyle}") {
        transitive = false
    }
}

checkstyle {
    toolVersion = "${versions.checkstyle}"
    config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
} */

def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(7)
}

// Tells Gradle to use the previously defined Java 7 compatible JDK.
java {
    toolchain {
        compiler
    }
}

// Tells Gradle to always compile with the previously defined Java 7 compatible JDK.
tasks.withType(JavaCompile).configureEach {
    javaCompiler = compiler
}

repositories {
    mavenCentral()
    maven {
        name = 'mojang'
        url = 'https://libraries.minecraft.net/'
    }
}

shadowJar {
    dependencies {
        exclude(dependency("org.ow2.asm:asm-all:${project.asmVersion}"))
        exclude(dependency("net.minecraft:launchwrapper:${project.launchwrapperVersion}"))
        //exclude(dependency("net.sf.jopt-simple:jopt-simple:${project.joptSimpleVersion}"))
        exclude(dependency("org.lwjgl.lwjgl:lwjgl:${project.lwjglVersion}"))
    }

    minimize()

    // Hacky exclusions to minimise file size.
    exclude 'org/**/*.txt'
    exclude 'META-INF/maven/**/*.*'

    // Currently, this merges all licences from each library into one file, as well as the same for notices.
    // TODO: Come up with a better way to do this. Ideally I'd rename the file based on the library.
    append 'META-INF/LICENSE.txt'
    append 'META-INF/NOTICE.txt'

    // Relocate libraries to prevent them from leaking into the classpath for other applications
    relocate 'org.apache.commons.codec', 'com.zero.retrowrapper.shadow.commons-codec'
    relocate 'org.apache.commons.io', 'com.zero.retrowrapper.shadow.commons-io'
    relocate 'org.apache.commons.lang3', 'com.zero.retrowrapper.shadow.commons-lang3'
    relocate 'com.eclipsesource.json', 'com.zero.retrowrapper.shadow.minimal-json'

    archiveClassifier = 'debug'
}

version = project.version

task checkRelease {
    if (!(System.getenv("BUILD_RELEASE") == "true")) {
        version += ("-SNAPSHOT")
    }
}

dependencies {
    // asm
    api "org.ow2.asm:asm-all:${project.asmVersion}"

    // launchwrapper + dependencies
    api ("net.minecraft:launchwrapper:${project.launchwrapperVersion}") {
        transitive = false
    }

    // jopt
    //api "net.sf.jopt-simple:jopt-simple:${project.joptSimpleVersion}"

    // lwjgl
    api ("org.lwjgl.lwjgl:lwjgl:${project.lwjglVersion}") {
        transitive = false
    }

    // commons-codec, for Base 64 decoding of skin strings
    implementation "commons-codec:commons-codec:${project.commonsCodecVersion}"

    // commons-io, for file access
    implementation "commons-io:commons-io:${project.commonsIOVersion}"

    // commons-lang, for OS utilities
    implementation "org.apache.commons:commons-lang3:${project.commonsLangVersion}"

    // minimal-json
    implementation "com.eclipsesource.minimal-json:minimal-json:${project.minimalJsonVersion}"
}

processResources {
    inputs.property "version", project.version // Redo this task when version value changes.
    filesMatching('com/zero/retrowrapper/retrowrapperVersion.txt') {
        // replace build variables
        expand 'version': version
    }
}

// Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

configurations {
    //depsForProGuard.extendsFrom(implementation, api)
    depsForProGuard.extendsFrom(api)
}

// This task uses ProGuard to shrink the built .jar's file size and optimise the bytecode, mainly by removing unused shadowed dependencies.
task proguard(dependsOn: shadowJar, type: proguard.gradle.ProGuardTask) {
    injars "build/libs/" + rootProject.name + "-" + version + "-debug.jar"
    outjars "build/libs/" + rootProject.name + "-" + version + ".jar"

    // Get the location of rt.jar from the provided toolchain.
    // Note to self: probably support building with not outdated versions of Java in the future.
    libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/lib/rt.jar"
    // If rt.jar is not there, try looking inside a JRE folder instead.
    libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/jre/lib/rt.jar"

    // Add relevant libraries to ProGuard's list of libraries to optimise against.
    libraryjars project.configurations.depsForProGuard

    // The rest of the configs are in this file
    configuration 'guard.pro'
}

jar {
    manifest {
        attributes (
            'Main-Class': 'com.zero.retrowrapper.installer.Installer'
        )
    }
    enabled = false
    dependsOn(proguard)
}

// This task creates a .jar file containing the source code of this project.
task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // Shadowed .jar
            publication -> project.shadow.component(publication)
            // Source code in a .jar
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
        }
    }
}
